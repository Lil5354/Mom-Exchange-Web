@model B_M.Models.AdminPostsViewModel
@{
    ViewBag.Title = "Quản lý bài viết";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<!-- Statistics Cards -->
<div class="stats-grid">
    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-newspaper"></i>
        </div>
        <div class="stat-number">@Model.TotalPosts</div>
        <div class="stat-label">Tổng bài viết</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-users"></i>
        </div>
        <div class="stat-number">@Model.TotalCommunityPosts</div>
        <div class="stat-label">Bài cộng đồng</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-exchange-alt"></i>
        </div>
        <div class="stat-number">@Model.TotalTradePosts</div>
        <div class="stat-label">Bài trao đổi</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-heart"></i>
        </div>
        <div class="stat-number">@Model.TotalMilkPosts</div>
        <div class="stat-label">Bài hiến sữa</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-clock"></i>
        </div>
        <div class="stat-number">@Model.PendingPosts</div>
        <div class="stat-label">Chờ duyệt</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-times-circle"></i>
        </div>
        <div class="stat-number">@Model.RejectedPosts</div>
        <div class="stat-label">Bị từ chối</div>
    </div>
</div>

<div class="admin-card">
    <div class="admin-card-header">
        <h5><i class="fas fa-newspaper"></i> Danh sách bài viết</h5>
        <div style="display: flex; gap: 10px; align-items: center;">
            <span style="color: #7f8c8d; font-size: 14px;">Tổng: @Model.TotalPosts bài viết</span>
            @if (Model.Posts.Count != Model.TotalPosts)
            {
                <span style="color: #3498db; font-size: 14px;">| Hiển thị: @Model.Posts.Count kết quả</span>
            }
        </div>
    </div>
    <div class="admin-card-body">
        @Html.AntiForgeryToken()
        
        <!-- Search and Filter -->
        <div style="margin-bottom: 20px;">
            @using (Html.BeginForm("Posts", "Admin", new { area = "Admin" }, FormMethod.Get, new { @id = "searchForm" }))
            {
                <!-- Basic Search -->
                <div style="display: flex; gap: 15px; margin-bottom: 15px; flex-wrap: wrap; align-items: center;">
                    <div style="flex: 1; min-width: 200px;">
                        <input type="text" name="search" value="@Model.SearchTerm" placeholder="Tìm kiếm nhanh theo tiêu đề, tác giả..." 
                               style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; font-size: 14px;" />
                    </div>
                    <div>
                        <select name="typeFilter" style="padding: 10px; border: 1px solid #ddd; border-radius: 5px; font-size: 14px;">
                            <option value="all" @(Model.TypeFilter == "all" ? "selected" : "")>Tất cả loại</option>
                            <option value="Community" @(Model.TypeFilter == "Community" ? "selected" : "")>Cộng đồng</option>
                            <option value="Trade" @(Model.TypeFilter == "Trade" ? "selected" : "")>Trao đổi</option>
                            <option value="Social" @(Model.TypeFilter == "Social" ? "selected" : "")>Xã hội</option>
                            <option value="Milk" @(Model.TypeFilter == "Milk" ? "selected" : "")>Hiến sữa</option>
                        </select>
                    </div>
                    <div>
                        <select name="statusFilter" style="padding: 10px; border: 1px solid #ddd; border-radius: 5px; font-size: 14px;">
                            <option value="all" @(Model.StatusFilter == "all" ? "selected" : "")>Tất cả trạng thái</option>
                            <option value="Active" @(Model.StatusFilter == "Active" ? "selected" : "")>Hoạt động</option>
                            <option value="Pending" @(Model.StatusFilter == "Pending" ? "selected" : "")>Chờ duyệt</option>
                            <option value="Rejected" @(Model.StatusFilter == "Rejected" ? "selected" : "")>Bị từ chối</option>
                        </select>
                    </div>
                    <button type="submit" class="btn-admin" style="padding: 10px 20px;">
                        <i class="fas fa-search"></i> Tìm kiếm
                    </button>
                    <button type="button" id="toggleAdvancedSearch" class="btn-admin-secondary" style="padding: 10px 20px;">
                        <i class="fas fa-cog"></i> Tìm kiếm nâng cao
                    </button>
                    <a href="@Url.Action("Posts", "Admin", new { area = "Admin" })" class="btn-admin-secondary" style="padding: 10px 20px; text-decoration: none;">
                        <i class="fas fa-refresh"></i> Làm mới
                    </a>
                </div>

                <!-- Advanced Search Panel -->
                <div id="advancedSearchPanel" style="display: @(Model.ShowAdvancedSearch ? "block" : "none"); background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 15px; border: 1px solid #e9ecef;">
                    <h6 style="margin-bottom: 15px; color: #495057; font-weight: 600;">
                        <i class="fas fa-search-plus"></i> Tìm kiếm nâng cao
                    </h6>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-bottom: 15px;">
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #495057;">Tác giả:</label>
                            <input type="text" name="authorSearch" value="@Model.AuthorSearch" placeholder="Tìm theo tác giả..." 
                                   style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                        </div>
                        
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #495057;">Tiêu đề:</label>
                            <input type="text" name="titleSearch" value="@Model.TitleSearch" placeholder="Tìm theo tiêu đề..." 
                                   style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                        </div>
                        
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #495057;">Nội dung:</label>
                            <input type="text" name="contentSearch" value="@Model.ContentSearch" placeholder="Tìm theo nội dung..." 
                                   style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                        </div>
                        
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #495057;">Ngày tạo từ:</label>
                            <input type="date" name="createdFrom" value="@(Model.CreatedFrom?.ToString("yyyy-MM-dd"))" 
                                   style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                        </div>
                        
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #495057;">Ngày tạo đến:</label>
                            <input type="date" name="createdTo" value="@(Model.CreatedTo?.ToString("yyyy-MM-dd"))" 
                                   style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                        </div>
                        
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #495057;">Sắp xếp theo:</label>
                            <select name="sortBy" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                <option value="created" @(Model.SortBy == "created" ? "selected" : "")>Ngày tạo</option>
                                <option value="title" @(Model.SortBy == "title" ? "selected" : "")>Tiêu đề</option>
                                <option value="author" @(Model.SortBy == "author" ? "selected" : "")>Tác giả</option>
                                <option value="type" @(Model.SortBy == "type" ? "selected" : "")>Loại bài</option>
                                <option value="status" @(Model.SortBy == "status" ? "selected" : "")>Trạng thái</option>
                            </select>
                        </div>
                        
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #495057;">Thứ tự:</label>
                            <select name="sortOrder" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                <option value="desc" @(Model.SortOrder == "desc" ? "selected" : "")>Giảm dần</option>
                                <option value="asc" @(Model.SortOrder == "asc" ? "selected" : "")>Tăng dần</option>
                            </select>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 10px; align-items: center; margin-bottom: 15px;">
                        <label style="display: flex; align-items: center; gap: 5px; font-weight: 500;">
                            <input type="checkbox" name="caseSensitive" @(Model.CaseSensitive ? "checked" : "") />
                            Phân biệt hoa thường
                        </label>
                        <label style="display: flex; align-items: center; gap: 5px; font-weight: 500;">
                            <input type="checkbox" name="exactMatch" @(Model.ExactMatch ? "checked" : "") />
                            Tìm kiếm chính xác
                        </label>
                    </div>
                    
                    <div style="display: flex; gap: 10px;">
                        <button type="submit" class="btn-admin" style="padding: 8px 16px;">
                            <i class="fas fa-search"></i> Tìm kiếm nâng cao
                        </button>
                        <button type="button" id="clearAdvancedSearch" class="btn-admin-secondary" style="padding: 8px 16px;">
                            <i class="fas fa-times"></i> Xóa bộ lọc
                        </button>
                    </div>
                </div>

                <!-- Hidden fields to preserve advanced search state -->
                <input type="hidden" name="showAdvancedSearch" value="@Model.ShowAdvancedSearch.ToString().ToLower()" />
            }
        </div>

        <!-- Posts Table -->
        @if (Model.Posts.Any())
        {
            <div class="table-responsive">
                <table class="table-admin">
                    <thead>
                        <tr>
                            <th>Thông tin bài viết</th>
                            <th>Tác giả</th>
                            <th>Loại</th>
                            <th>Trạng thái</th>
                            <th>Tương tác</th>
                            <th>Ngày tạo</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var post in Model.Posts)
                        {
                            <tr>
                                <td>
                                    <div style="display: flex; align-items: flex-start; gap: 10px;">
                                        @if (!string.IsNullOrEmpty(post.ImageUrl))
                                        {
                                            <img src="@post.ImageUrl" alt="Post Image" style="width: 60px; height: 60px; object-fit: cover; border-radius: 8px;" />
                                        }
                                        else
                                        {
                                            <div style="width: 60px; height: 60px; background: linear-gradient(135deg, #e74c3c, #c0392b); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; font-size: 20px;">
                                                <i class="fas fa-newspaper"></i>
                                            </div>
                                        }
                                        <div style="flex: 1;">
                                            <div style="font-weight: 600; color: #2c3e50; margin-bottom: 5px; line-height: 1.3;">
                                                @post.Title
                                            </div>
                                            <div style="font-size: 12px; color: #7f8c8d; line-height: 1.4;">
                                                @(post.Excerpt?.Length > 100 ? post.Excerpt.Substring(0, 100) + "..." : post.Excerpt)
                                            </div>
                                            @if (post.Tags.Any())
                                            {
                                                <div style="margin-top: 5px;">
                                                    @foreach (var tag in post.Tags.Take(3))
                                                    {
                                                        <span style="background: #e3f2fd; color: #1976d2; padding: 2px 6px; border-radius: 10px; font-size: 10px; margin-right: 5px;">@tag</span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <div style="font-weight: 600; color: #2c3e50;">@post.AuthorName</div>
                                        <div style="font-size: 12px; color: #7f8c8d;">@post.AuthorEmail</div>
                                        @if (!string.IsNullOrEmpty(post.Location))
                                        {
                                            <div style="font-size: 11px; color: #95a5a6;">
                                                <i class="fas fa-map-marker-alt"></i> @post.Location
                                            </div>
                                        }
                                    </div>
                                </td>
                                <td>
                                    @{
                                        string typeClass = "";
                                        string typeIcon = "";
                                        switch (post.Type)
                                        {
                                            case "Community":
                                                typeClass = "badge-info";
                                                typeIcon = "users";
                                                break;
                                            case "Trade":
                                                typeClass = "badge-warning";
                                                typeIcon = "exchange-alt";
                                                break;
                                            case "Social":
                                                typeClass = "badge-success";
                                                typeIcon = "heart";
                                                break;
                                            case "Milk":
                                                typeClass = "badge-danger";
                                                typeIcon = "baby";
                                                break;
                                            default:
                                                typeClass = "badge-secondary";
                                                typeIcon = "newspaper";
                                                break;
                                        }
                                    }
                                    <span class="badge @typeClass">
                                        <i class="fas fa-@typeIcon"></i> @post.Type
                                    </span>
                                    @if (post.Type == "Milk" && post.IsHealthVerified)
                                    {
                                        <div style="margin-top: 5px;">
                                            <span style="background: #d4edda; color: #155724; padding: 2px 6px; border-radius: 10px; font-size: 10px;">
                                                <i class="fas fa-check-circle"></i> Đã xác minh sức khỏe
                                            </span>
                                        </div>
                                    }
                                </td>
                                <td>
                                    @{
                                        string statusClass = "";
                                        switch (post.Status)
                                        {
                                            case "Active":
                                                statusClass = "badge-success";
                                                break;
                                            case "Pending":
                                                statusClass = "badge-warning";
                                                break;
                                            case "Rejected":
                                                statusClass = "badge-danger";
                                                break;
                                            default:
                                                statusClass = "badge-secondary";
                                                break;
                                        }
                                    }
                                    <span class="badge @statusClass">@post.Status</span>
                                    @if (post.Status == "Rejected" && !string.IsNullOrEmpty(post.RejectionReason))
                                    {
                                        <div style="margin-top: 5px; font-size: 11px; color: #e74c3c;">
                                            <i class="fas fa-exclamation-triangle"></i> @post.RejectionReason
                                        </div>
                                    }
                                </td>
                                <td>
                                    <div style="font-size: 12px;">
                                        <div style="margin-bottom: 3px;">
                                            <i class="fas fa-heart" style="color: #e74c3c;"></i> @post.LikeCount
                                        </div>
                                        <div style="margin-bottom: 3px;">
                                            <i class="fas fa-comment" style="color: #3498db;"></i> @post.CommentCount
                                        </div>
                                        <div>
                                            <i class="fas fa-eye" style="color: #95a5a6;"></i> @post.ViewCount
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div style="font-size: 12px;">
                                        <div>@post.CreatedAt.ToString("dd/MM/yyyy")</div>
                                        <div style="color: #7f8c8d;">@post.CreatedAt.ToString("HH:mm")</div>
                                        @if (post.UpdatedAt.HasValue)
                                        {
                                            <div style="color: #95a5a6; font-size: 10px;">
                                                Cập nhật: @post.UpdatedAt.Value.ToString("dd/MM HH:mm")
                                            </div>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div style="display: flex; gap: 5px; flex-wrap: wrap;">
                                        @if (post.Status == "Pending")
                                        {
                                            <button data-post-id="@post.Id" data-post-type="@post.Type" 
                                                    class="btn-admin" style="padding: 5px 10px; font-size: 12px; background: #28a745;">
                                                <i class="fas fa-check"></i> Duyệt
                                            </button>
                                            <button data-post-id="@post.Id" data-post-type="@post.Type" 
                                                    class="btn-admin-secondary" style="padding: 5px 10px; font-size: 12px; background: #dc3545; color: white;">
                                                <i class="fas fa-times"></i> Từ chối
                                            </button>
                                        }
                                        else if (post.Status == "Active")
                                        {
                                            <button data-post-id="@post.Id" data-post-type="@post.Type" 
                                                    class="btn-admin-secondary" style="padding: 5px 10px; font-size: 12px; background: #dc3545; color: white;">
                                                <i class="fas fa-ban"></i> Vô hiệu hóa
                                            </button>
                                        }
                                        else if (post.Status == "Rejected")
                                        {
                                            <button data-post-id="@post.Id" data-post-type="@post.Type" 
                                                    class="btn-admin" style="padding: 5px 10px; font-size: 12px;">
                                                <i class="fas fa-check"></i> Duyệt lại
                                            </button>
                                        }
                                        
                                        <a href="@Url.Action("PostDetails", "Admin", new { area = "Admin", id = post.Id, type = post.Type })" 
                                           class="btn-admin-secondary" style="padding: 5px 10px; font-size: 12px; text-decoration: none;">
                                            <i class="fas fa-eye"></i> Chi tiết
                                        </a>
                                        
                                        <button data-post-id="@post.Id" data-post-type="@post.Type" 
                                                class="btn-admin-secondary" style="padding: 5px 10px; font-size: 12px; background: #6c757d; color: white;">
                                            <i class="fas fa-trash"></i> Xóa
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        <!-- Pagination -->
        @if (Model.TotalPages > 1)
            {
                <div style="display: flex; justify-content: center; margin-top: 20px;">
                    <nav>
                        <ul style="display: flex; list-style: none; padding: 0; margin: 0; gap: 5px;">
                            @if (Model.CurrentPage > 1)
                            {
                                <li>
                                    <a href="@Url.Action("Posts", "Admin", new { area = "Admin", page = Model.CurrentPage - 1, search = Model.SearchTerm, typeFilter = Model.TypeFilter, statusFilter = Model.StatusFilter, authorSearch = Model.AuthorSearch, titleSearch = Model.TitleSearch, contentSearch = Model.ContentSearch, createdFrom = Model.CreatedFrom, createdTo = Model.CreatedTo, sortBy = Model.SortBy, sortOrder = Model.SortOrder, showAdvancedSearch = Model.ShowAdvancedSearch, caseSensitive = Model.CaseSensitive, exactMatch = Model.ExactMatch })" 
                                       style="padding: 8px 12px; border: 1px solid #ddd; text-decoration: none; color: #333; border-radius: 3px;">
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                </li>
                            }

                            @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                            {
                                <li>
                                    @{
                                        string linkColor = i == Model.CurrentPage ? "white" : "#333";
                                        string linkBgColor = i == Model.CurrentPage ? "#e74c3c" : "white";
                                    }
                                    <a href="@Url.Action("Posts", "Admin", new { area = "Admin", page = i, search = Model.SearchTerm, typeFilter = Model.TypeFilter, statusFilter = Model.StatusFilter, authorSearch = Model.AuthorSearch, titleSearch = Model.TitleSearch, contentSearch = Model.ContentSearch, createdFrom = Model.CreatedFrom, createdTo = Model.CreatedTo, sortBy = Model.SortBy, sortOrder = Model.SortOrder, showAdvancedSearch = Model.ShowAdvancedSearch, caseSensitive = Model.CaseSensitive, exactMatch = Model.ExactMatch })" 
                                       style="padding: 8px 12px; border: 1px solid #ddd; text-decoration: none; color: @linkColor; background-color: @linkBgColor; border-radius: 3px;">
                                        @i
                                    </a>
                                </li>
                            }

                            @if (Model.CurrentPage < Model.TotalPages)
                            {
                                <li>
                                    <a href="@Url.Action("Posts", "Admin", new { area = "Admin", page = Model.CurrentPage + 1, search = Model.SearchTerm, typeFilter = Model.TypeFilter, statusFilter = Model.StatusFilter, authorSearch = Model.AuthorSearch, titleSearch = Model.TitleSearch, contentSearch = Model.ContentSearch, createdFrom = Model.CreatedFrom, createdTo = Model.CreatedTo, sortBy = Model.SortBy, sortOrder = Model.SortOrder, showAdvancedSearch = Model.ShowAdvancedSearch, caseSensitive = Model.CaseSensitive, exactMatch = Model.ExactMatch })" 
                                       style="padding: 8px 12px; border: 1px solid #ddd; text-decoration: none; color: #333; border-radius: 3px;">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            }
        
    </div>
</div>

<!-- Rejection Modal -->
<div id="rejectionModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 30px; border-radius: 12px; width: 90%; max-width: 500px;">
        <h5 style="margin-bottom: 20px; color: #2c3e50;">
            <i class="fas fa-times-circle" style="color: #e74c3c;"></i> Từ chối bài viết
        </h5>
        <div style="margin-bottom: 20px;">
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #495057;">Lý do từ chối:</label>
            <textarea id="rejectionReason" placeholder="Nhập lý do từ chối bài viết..." 
                      style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 8px; font-size: 14px; resize: vertical; min-height: 100px;"></textarea>
        </div>
        <div style="display: flex; gap: 10px; justify-content: flex-end;">
            <button id="cancelRejection" class="btn-admin-secondary" style="padding: 10px 20px;">
                <i class="fas fa-times"></i> Hủy
            </button>
            <button id="confirmRejection" class="btn-admin-secondary" style="padding: 10px 20px; background: #dc3545; color: white;">
                <i class="fas fa-check"></i> Xác nhận từ chối
            </button>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function() {
            var currentPostId = null;
            var currentPostType = null;

            // Toggle Advanced Search Panel
            $('#toggleAdvancedSearch').on('click', function() {
                var panel = $('#advancedSearchPanel');
                var isVisible = panel.is(':visible');
                
                if (isVisible) {
                    panel.slideUp();
                    $(this).html('<i class="fas fa-cog"></i> Tìm kiếm nâng cao');
                } else {
                    panel.slideDown();
                    $(this).html('<i class="fas fa-cog"></i> Ẩn tìm kiếm nâng cao');
                }
                
                // Update hidden field
                $('input[name="showAdvancedSearch"]').val(!isVisible);
            });

            // Clear Advanced Search
            $('#clearAdvancedSearch').on('click', function() {
                $('#advancedSearchPanel input[type="text"]').val('');
                $('#advancedSearchPanel input[type="date"]').val('');
                $('#advancedSearchPanel select').prop('selectedIndex', 0);
                $('#advancedSearchPanel input[type="checkbox"]').prop('checked', false);
                
                // Submit form to clear all filters
                var form = $('#searchForm');
                form.find('input[name="search"]').val('');
                form.find('select[name="typeFilter"]').val('all');
                form.find('select[name="statusFilter"]').val('all');
                form.find('input[name="showAdvancedSearch"]').val('false');
                form.submit();
            });

            // Auto-submit form when sorting changes
            $('select[name="sortBy"], select[name="sortOrder"]').on('change', function() {
                $('#searchForm').submit();
            });

            // Approve Post
            $('button[data-post-id]').filter(function() {
                return $(this).text().includes('Duyệt');
            }).on('click', function() {
                var postId = $(this).data('post-id');
                var postType = $(this).data('post-type');
                approvePost(postId, postType);
            });

            // Reject Post
            $('button[data-post-id]').filter(function() {
                return $(this).text().includes('Từ chối');
            }).on('click', function() {
                currentPostId = $(this).data('post-id');
                currentPostType = $(this).data('post-type');
                $('#rejectionModal').show();
            });

            // Delete Post
            $('button[data-post-id]').filter(function() {
                return $(this).text().includes('Xóa');
            }).on('click', function() {
                var postId = $(this).data('post-id');
                var postType = $(this).data('post-type');
                deletePost(postId, postType);
            });

            // Modal handlers
            $('#cancelRejection').on('click', function() {
                $('#rejectionModal').hide();
                $('#rejectionReason').val('');
            });

            $('#confirmRejection').on('click', function() {
                var reason = $('#rejectionReason').val().trim();
                if (reason === '') {
                    alert('Vui lòng nhập lý do từ chối.');
                    return;
                }
                rejectPost(currentPostId, currentPostType, reason);
                $('#rejectionModal').hide();
                $('#rejectionReason').val('');
            });

            // Show search results info
            @if (!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.AuthorSearch) || !string.IsNullOrEmpty(Model.TitleSearch) || !string.IsNullOrEmpty(Model.ContentSearch) || !string.IsNullOrEmpty(Model.TypeFilter) || !string.IsNullOrEmpty(Model.StatusFilter) || Model.CreatedFrom.HasValue || Model.CreatedTo.HasValue)
            {
                <text>
                showSearchInfo();
                </text>
            }
        });

        function approvePost(postId, postType) {
            if (confirm('Bạn có chắc chắn muốn duyệt bài viết này?')) {
                $.ajax({
                    url: '@Url.Action("ApprovePost", "Admin", new { area = "Admin" })',
                    type: 'POST',
                    data: {
                        postId: postId,
                        postType: postType,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            showAlert('success', response.message);
                            // Update UI elements
                            var statusBadge = $('button[data-post-id="' + postId + '"]').closest('tr').find('.badge-warning, .badge-danger, .badge-success');
                            statusBadge.removeClass('badge-warning badge-danger badge-success')
                                .addClass(response.data.statusClass)
                                .text(response.data.status);
                            
                            // Update action buttons
                            updateActionButtons(postId, response.data.status);
                        } else {
                            showAlert('error', response.message);
                        }
                    },
                    error: function() {
                        showAlert('error', 'Có lỗi xảy ra khi duyệt bài viết.');
                    }
                });
            }
        }

        function rejectPost(postId, postType, reason) {
            $.ajax({
                url: '@Url.Action("RejectPost", "Admin", new { area = "Admin" })',
                type: 'POST',
                data: {
                    postId: postId,
                    postType: postType,
                    reason: reason,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        showAlert('success', response.message);
                        // Update UI elements
                        var statusBadge = $('button[data-post-id="' + postId + '"]').closest('tr').find('.badge-warning, .badge-danger, .badge-success');
                        statusBadge.removeClass('badge-warning badge-danger badge-success')
                            .addClass(response.data.statusClass)
                            .text(response.data.status);
                        
                        // Add rejection reason
                        var rejectionDiv = statusBadge.parent().find('.rejection-reason');
                        if (rejectionDiv.length === 0) {
                            statusBadge.after('<div class="rejection-reason" style="margin-top: 5px; font-size: 11px; color: #e74c3c;"><i class="fas fa-exclamation-triangle"></i> ' + response.data.rejectionReason + '</div>');
                        } else {
                            rejectionDiv.html('<i class="fas fa-exclamation-triangle"></i> ' + response.data.rejectionReason);
                        }
                        
                        // Update action buttons
                        updateActionButtons(postId, response.data.status);
                    } else {
                        showAlert('error', response.message);
                    }
                },
                error: function() {
                    showAlert('error', 'Có lỗi xảy ra khi từ chối bài viết.');
                }
            });
        }

        function deletePost(postId, postType) {
            if (confirm('Bạn có chắc chắn muốn xóa bài viết này? Hành động này không thể hoàn tác.')) {
                $.ajax({
                    url: '@Url.Action("DeletePost", "Admin", new { area = "Admin" })',
                    type: 'POST',
                    data: {
                        postId: postId,
                        postType: postType,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            showAlert('success', response.message);
                            // Remove row from table
                            $('button[data-post-id="' + postId + '"]').closest('tr').fadeOut();
                        } else {
                            showAlert('error', response.message);
                        }
                    },
                    error: function() {
                        showAlert('error', 'Có lỗi xảy ra khi xóa bài viết.');
                    }
                });
            }
        }

        function updateActionButtons(postId, status) {
            var actionCell = $('button[data-post-id="' + postId + '"]').closest('td');
            var approveBtn = actionCell.find('button').filter(function() {
                return $(this).text().includes('Duyệt');
            });
            var rejectBtn = actionCell.find('button').filter(function() {
                return $(this).text().includes('Từ chối');
            });
            var disableBtn = actionCell.find('button').filter(function() {
                return $(this).text().includes('Vô hiệu hóa');
            });

            if (status === 'Active') {
                approveBtn.remove();
                rejectBtn.remove();
                disableBtn.show();
            } else if (status === 'Rejected') {
                approveBtn.text('Duyệt lại').show();
                rejectBtn.remove();
                disableBtn.remove();
            } else if (status === 'Pending') {
                approveBtn.show();
                rejectBtn.show();
                disableBtn.remove();
            }
        }

        function showSearchInfo() {
            var searchInfo = [];
            
            @if (!string.IsNullOrEmpty(Model.SearchTerm))
            {
                <text>searchInfo.push('Tìm kiếm: "@Model.SearchTerm"');</text>
            }
            
            @if (!string.IsNullOrEmpty(Model.AuthorSearch))
            {
                <text>searchInfo.push('Tác giả: "@Model.AuthorSearch"');</text>
            }
            
            @if (!string.IsNullOrEmpty(Model.TitleSearch))
            {
                <text>searchInfo.push('Tiêu đề: "@Model.TitleSearch"');</text>
            }
            
            @if (!string.IsNullOrEmpty(Model.ContentSearch))
            {
                <text>searchInfo.push('Nội dung: "@Model.ContentSearch"');</text>
            }
            
            @if (!string.IsNullOrEmpty(Model.TypeFilter) && Model.TypeFilter != "all")
            {
                <text>searchInfo.push('Loại: "@Model.TypeFilter"');</text>
            }
            
            @if (!string.IsNullOrEmpty(Model.StatusFilter) && Model.StatusFilter != "all")
            {
                <text>searchInfo.push('Trạng thái: "@Model.StatusFilter"');</text>
            }
            
            @if (Model.CreatedFrom.HasValue)
            {
                <text>searchInfo.push('Từ ngày: "@Model.CreatedFrom.Value.ToString("dd/MM/yyyy")"');</text>
            }
            
            @if (Model.CreatedTo.HasValue)
            {
                <text>searchInfo.push('Đến ngày: "@Model.CreatedTo.Value.ToString("dd/MM/yyyy")"');</text>
            }
            
            if (searchInfo.length > 0) {
                var infoHtml = '<div style="background: #e3f2fd; border: 1px solid #2196f3; border-radius: 5px; padding: 10px; margin-bottom: 15px; font-size: 14px;">' +
                    '<strong><i class="fas fa-info-circle"></i> Bộ lọc hiện tại:</strong> ' + searchInfo.join(' | ') +
                    '<button type="button" onclick="clearAllFilters()" style="float: right; background: #2196f3; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">' +
                    '<i class="fas fa-times"></i> Xóa tất cả</button>' +
                    '</div>';
                $('.admin-card-body').prepend(infoHtml);
            }
        }

        function clearAllFilters() {
            $('#clearAdvancedSearch').click();
        }

        function showAlert(type, message) {
            var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            var alertHtml = '<div class="alert ' + alertClass + ' alert-dismissible fade show" role="alert" style="margin-bottom: 20px;">' +
                '<strong>' + (type === 'success' ? 'Thành công!' : 'Lỗi!') + '</strong> ' + message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" style="float: right; background: none; border: none; font-size: 20px; cursor: pointer;">&times;</button>' +
                '</div>';
            
            $('.admin-content').prepend(alertHtml);
            
            // Auto-hide after 5 seconds
            setTimeout(function() {
                $('.alert').fadeOut();
            }, 5000);
        }
    </script>
}